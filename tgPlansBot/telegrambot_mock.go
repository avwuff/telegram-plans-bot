// Code generated by mockery v2.24.0. DO NOT EDIT.

package tgPlansBot

import (
	context "context"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	mock "github.com/stretchr/testify/mock"
)

// TelegramBotMock is an autogenerated mock type for the TelegramBot type
type TelegramBotMock struct {
	mock.Mock
}

// AnswerCallbackQuery provides a mock function with given fields: c
func (_m *TelegramBotMock) AnswerCallbackQuery(c tgbotapi.CallbackConfig) (*tgbotapi.APIResponse, error) {
	ret := _m.Called(c)

	var r0 *tgbotapi.APIResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(tgbotapi.CallbackConfig) (*tgbotapi.APIResponse, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(tgbotapi.CallbackConfig) *tgbotapi.APIResponse); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tgbotapi.APIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(tgbotapi.CallbackConfig) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnswerInlineQuery provides a mock function with given fields: c
func (_m *TelegramBotMock) AnswerInlineQuery(c tgbotapi.InlineConfig) (*tgbotapi.APIResponse, error) {
	ret := _m.Called(c)

	var r0 *tgbotapi.APIResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(tgbotapi.InlineConfig) (*tgbotapi.APIResponse, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(tgbotapi.InlineConfig) *tgbotapi.APIResponse); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tgbotapi.APIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(tgbotapi.InlineConfig) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *TelegramBotMock) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Listen provides a mock function with given fields: ctx, handler
func (_m *TelegramBotMock) Listen(ctx context.Context, handler func(tgbotapi.Update)) {
	_m.Called(ctx, handler)
}

// Request provides a mock function with given fields: c
func (_m *TelegramBotMock) Request(c tgbotapi.Chattable) (*tgbotapi.APIResponse, error) {
	ret := _m.Called(c)

	var r0 *tgbotapi.APIResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) (*tgbotapi.APIResponse, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) *tgbotapi.APIResponse); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tgbotapi.APIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(tgbotapi.Chattable) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: c
func (_m *TelegramBotMock) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	ret := _m.Called(c)

	var r0 tgbotapi.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) (tgbotapi.Message, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) tgbotapi.Message); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(tgbotapi.Message)
	}

	if rf, ok := ret.Get(1).(func(tgbotapi.Chattable) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMyCommands provides a mock function with given fields: cmds
func (_m *TelegramBotMock) SetMyCommands(cmds tgbotapi.SetMyCommandsConfig) (*tgbotapi.APIResponse, error) {
	ret := _m.Called(cmds)

	var r0 *tgbotapi.APIResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(tgbotapi.SetMyCommandsConfig) (*tgbotapi.APIResponse, error)); ok {
		return rf(cmds)
	}
	if rf, ok := ret.Get(0).(func(tgbotapi.SetMyCommandsConfig) *tgbotapi.APIResponse); ok {
		r0 = rf(cmds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tgbotapi.APIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(tgbotapi.SetMyCommandsConfig) error); ok {
		r1 = rf(cmds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTelegramBotMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewTelegramBotMock creates a new instance of TelegramBotMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTelegramBotMock(t mockConstructorTestingTNewTelegramBotMock) *TelegramBotMock {
	mock := &TelegramBotMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
