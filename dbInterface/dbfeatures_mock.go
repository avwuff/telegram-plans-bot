// Code generated by mockery v2.24.0. DO NOT EDIT.

package dbInterface

import (
	localizer "furryplansbot.avbrand.com/localizer"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// DBFeaturesMock is an autogenerated mock type for the DBFeatures type
type DBFeaturesMock struct {
	mock.Mock
}

// CalendarFeed provides a mock function with given fields: ownerId
func (_m *DBFeaturesMock) CalendarFeed(ownerId int64) ([]DBEvent, error) {
	ret := _m.Called(ownerId)

	var r0 []DBEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]DBEvent, error)); ok {
		return rf(ownerId)
	}
	if rf, ok := ret.Get(0).(func(int64) []DBEvent); ok {
		r0 = rf(ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DBEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEvent provides a mock function with given fields: OwnerID, Name, DateTime, TimeZone, OwnerName, Location, Language, Notes
func (_m *DBFeaturesMock) CreateEvent(OwnerID int64, Name string, DateTime time.Time, TimeZone string, OwnerName string, Location string, Language string, Notes string) (uint, error) {
	ret := _m.Called(OwnerID, Name, DateTime, TimeZone, OwnerName, Location, Language, Notes)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, time.Time, string, string, string, string, string) (uint, error)); ok {
		return rf(OwnerID, Name, DateTime, TimeZone, OwnerName, Location, Language, Notes)
	}
	if rf, ok := ret.Get(0).(func(int64, string, time.Time, string, string, string, string, string) uint); ok {
		r0 = rf(OwnerID, Name, DateTime, TimeZone, OwnerName, Location, Language, Notes)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(int64, string, time.Time, string, string, string, string, string) error); ok {
		r1 = rf(OwnerID, Name, DateTime, TimeZone, OwnerName, Location, Language, Notes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields:
func (_m *DBFeaturesMock) GetAllUsers() ([]int64, error) {
	ret := _m.Called()

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvent provides a mock function with given fields: eventId, ownerId
func (_m *DBFeaturesMock) GetEvent(eventId uint, ownerId int64) (DBEvent, error) {
	ret := _m.Called(eventId, ownerId)

	var r0 DBEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int64) (DBEvent, error)); ok {
		return rf(eventId, ownerId)
	}
	if rf, ok := ret.Get(0).(func(uint, int64) DBEvent); ok {
		r0 = rf(eventId, ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DBEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int64) error); ok {
		r1 = rf(eventId, ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByHash provides a mock function with given fields: hash, saltValue, shareMode
func (_m *DBFeaturesMock) GetEventByHash(hash string, saltValue string, shareMode bool) (DBEvent, *localizer.Localizer, error) {
	ret := _m.Called(hash, saltValue, shareMode)

	var r0 DBEvent
	var r1 *localizer.Localizer
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, bool) (DBEvent, *localizer.Localizer, error)); ok {
		return rf(hash, saltValue, shareMode)
	}
	if rf, ok := ret.Get(0).(func(string, string, bool) DBEvent); ok {
		r0 = rf(hash, saltValue, shareMode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DBEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, bool) *localizer.Localizer); ok {
		r1 = rf(hash, saltValue, shareMode)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*localizer.Localizer)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string, bool) error); ok {
		r2 = rf(hash, saltValue, shareMode)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetEvents provides a mock function with given fields: ownerId, includeOld
func (_m *DBFeaturesMock) GetEvents(ownerId int64, includeOld bool) ([]DBEvent, error) {
	ret := _m.Called(ownerId, includeOld)

	var r0 []DBEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, bool) ([]DBEvent, error)); ok {
		return rf(ownerId, includeOld)
	}
	if rf, ok := ret.Get(0).(func(int64, bool) []DBEvent); ok {
		r0 = rf(ownerId, includeOld)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DBEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, bool) error); ok {
		r1 = rf(ownerId, includeOld)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrefs provides a mock function with given fields: userid
func (_m *DBFeaturesMock) GetPrefs(userid int64) Prefs {
	ret := _m.Called(userid)

	var r0 Prefs
	if rf, ok := ret.Get(0).(func(int64) Prefs); ok {
		r0 = rf(userid)
	} else {
		r0 = ret.Get(0).(Prefs)
	}

	return r0
}

// GlobalMarkBadUser provides a mock function with given fields: id
func (_m *DBFeaturesMock) GlobalMarkBadUser(id int64) {
	_m.Called(id)
}

// GlobalSent provides a mock function with given fields: id
func (_m *DBFeaturesMock) GlobalSent(id int64) {
	_m.Called(id)
}

// GlobalShouldSend provides a mock function with given fields: id
func (_m *DBFeaturesMock) GlobalShouldSend(id int64) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NearbyFeed provides a mock function with given fields: latitude, longitude, distKM
func (_m *DBFeaturesMock) NearbyFeed(latitude float64, longitude float64, distKM int) ([]DBEvent, error) {
	ret := _m.Called(latitude, longitude, distKM)

	var r0 []DBEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(float64, float64, int) ([]DBEvent, error)); ok {
		return rf(latitude, longitude, distKM)
	}
	if rf, ok := ret.Get(0).(func(float64, float64, int) []DBEvent); ok {
		r0 = rf(latitude, longitude, distKM)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DBEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(float64, float64, int) error); ok {
		r1 = rf(latitude, longitude, distKM)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavePrefs provides a mock function with given fields: userid, prefs, colName
func (_m *DBFeaturesMock) SavePrefs(userid int64, prefs Prefs, colName string) error {
	ret := _m.Called(userid, prefs, colName)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, Prefs, string) error); ok {
		r0 = rf(userid, prefs, colName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchEvents provides a mock function with given fields: ownerId, searchText
func (_m *DBFeaturesMock) SearchEvents(ownerId int64, searchText string) ([]DBEvent, error) {
	ret := _m.Called(ownerId, searchText)

	var r0 []DBEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) ([]DBEvent, error)); ok {
		return rf(ownerId, searchText)
	}
	if rf, ok := ret.Get(0).(func(int64, string) []DBEvent); ok {
		r0 = rf(ownerId, searchText)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DBEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(ownerId, searchText)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDBFeaturesMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewDBFeaturesMock creates a new instance of DBFeaturesMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDBFeaturesMock(t mockConstructorTestingTNewDBFeaturesMock) *DBFeaturesMock {
	mock := &DBFeaturesMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
