// Code generated by mockery v2.24.0. DO NOT EDIT.

package dbInterface

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// DBEventMock is an autogenerated mock type for the DBEvent type
type DBEventMock struct {
	mock.Mock
}

// AmIAttending provides a mock function with given fields: id
func (_m *DBEventMock) AmIAttending(id int64) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Attending provides a mock function with given fields: userId, name, attendType, plusPeople, guests
func (_m *DBEventMock) Attending(userId int64, name string, attendType CanAttend, plusPeople int, guests []string) AttendMsgs {
	ret := _m.Called(userId, name, attendType, plusPeople, guests)

	var r0 AttendMsgs
	if rf, ok := ret.Get(0).(func(int64, string, CanAttend, int, []string) AttendMsgs); ok {
		r0 = rf(userId, name, attendType, plusPeople, guests)
	} else {
		r0 = ret.Get(0).(AttendMsgs)
	}

	return r0
}

// Closed provides a mock function with given fields:
func (_m *DBEventMock) Closed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DateTime provides a mock function with given fields:
func (_m *DBEventMock) DateTime() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// DeletePosting provides a mock function with given fields: MessageID
func (_m *DBEventMock) DeletePosting(MessageID string) error {
	ret := _m.Called(MessageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(MessageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePostingRegular provides a mock function with given fields: chatId, messageId
func (_m *DBEventMock) DeletePostingRegular(chatId int64, messageId int) error {
	ret := _m.Called(chatId, messageId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int) error); ok {
		r0 = rf(chatId, messageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableMaybe provides a mock function with given fields:
func (_m *DBEventMock) DisableMaybe() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EndDateTime provides a mock function with given fields:
func (_m *DBEventMock) EndDateTime() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetAttending provides a mock function with given fields: userId
func (_m *DBEventMock) GetAttending(userId int64) ([]*Attend, error) {
	ret := _m.Called(userId)

	var r0 []*Attend
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*Attend, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int64) []*Attend); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Attend)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCanAttend provides a mock function with given fields:
func (_m *DBEventMock) GetCanAttend() CanAttend {
	ret := _m.Called()

	var r0 CanAttend
	if rf, ok := ret.Get(0).(func() CanAttend); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(CanAttend)
	}

	return r0
}

// HideNames provides a mock function with given fields:
func (_m *DBEventMock) HideNames() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *DBEventMock) ID() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Language provides a mock function with given fields:
func (_m *DBEventMock) Language() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Location provides a mock function with given fields:
func (_m *DBEventMock) Location() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MaxAttendees provides a mock function with given fields:
func (_m *DBEventMock) MaxAttendees() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MaxGuests provides a mock function with given fields:
func (_m *DBEventMock) MaxGuests() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *DBEventMock) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Notes provides a mock function with given fields:
func (_m *DBEventMock) Notes() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OwnerName provides a mock function with given fields:
func (_m *DBEventMock) OwnerName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PictureURL provides a mock function with given fields:
func (_m *DBEventMock) PictureURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Postings provides a mock function with given fields:
func (_m *DBEventMock) Postings() ([]Posting, error) {
	ret := _m.Called()

	var r0 []Posting
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Posting, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Posting); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Posting)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavePosting provides a mock function with given fields: MessageID
func (_m *DBEventMock) SavePosting(MessageID string) {
	_m.Called(MessageID)
}

// SavePostingRegular provides a mock function with given fields: chatId, messageId
func (_m *DBEventMock) SavePostingRegular(chatId int64, messageId int) {
	_m.Called(chatId, messageId)
}

// SetClosed provides a mock function with given fields: v
func (_m *DBEventMock) SetClosed(v bool) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDateTime provides a mock function with given fields: d
func (_m *DBEventMock) SetDateTime(d time.Time) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDisableMaybe provides a mock function with given fields: v
func (_m *DBEventMock) SetDisableMaybe(v bool) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetEndDateTime provides a mock function with given fields: d
func (_m *DBEventMock) SetEndDateTime(d time.Time) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetHideNames provides a mock function with given fields: v
func (_m *DBEventMock) SetHideNames(v bool) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLanguage provides a mock function with given fields: t
func (_m *DBEventMock) SetLanguage(t string) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLocation provides a mock function with given fields: t
func (_m *DBEventMock) SetLocation(t string) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMaxAttendees provides a mock function with given fields: i
func (_m *DBEventMock) SetMaxAttendees(i int) error {
	ret := _m.Called(i)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMaxGuests provides a mock function with given fields: v
func (_m *DBEventMock) SetMaxGuests(v int) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetName provides a mock function with given fields: t
func (_m *DBEventMock) SetName(t string) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNotes provides a mock function with given fields: t
func (_m *DBEventMock) SetNotes(t string) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOwnerName provides a mock function with given fields: t
func (_m *DBEventMock) SetOwnerName(t string) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPictureURL provides a mock function with given fields: t
func (_m *DBEventMock) SetPictureURL(t string) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSharingAllowed provides a mock function with given fields: v
func (_m *DBEventMock) SetSharingAllowed(v bool) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSuitwalk provides a mock function with given fields: v
func (_m *DBEventMock) SetSuitwalk(v bool) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTimeZone provides a mock function with given fields: t
func (_m *DBEventMock) SetTimeZone(t string) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SharingAllowed provides a mock function with given fields:
func (_m *DBEventMock) SharingAllowed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Suitwalk provides a mock function with given fields:
func (_m *DBEventMock) Suitwalk() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TimeZone provides a mock function with given fields:
func (_m *DBEventMock) TimeZone() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewDBEventMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewDBEventMock creates a new instance of DBEventMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDBEventMock(t mockConstructorTestingTNewDBEventMock) *DBEventMock {
	mock := &DBEventMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
